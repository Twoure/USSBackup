#!/usr/bin/env python

"""
VidSpot.net Service Code
    Host offline
"""

RE_NORM = Regex(r'(https?://(?:www\.)?\w+\.\w+)(?:/embed-|/)(\w+)')
RE_THUMB = Regex(r'background\-image *?\: *?url\(["\'](http[^"\']+)["\']')
FALLBACK = 'http://i.imgur.com/75YO83o.jpg'

####################################################################################################
def NormalizeURL(url):

    r = RE_NORM.search(url)
    return r.group(1) + '/' + r.group(2) if r else url

####################################################################################################
def MetadataObjectForURL(url):

    try:
        page = HTTP.Request(url, cacheTime=10).content
        html = HTML.ElementFromString(page)
    except:
        Log.Exception(u"* Error: Cannot open '{0}' >>>".format(url))
        raise Ex.MediaNotAvailable


    title = html.xpath('//meta[@property="og:title"]/@content')
    if title:
        duration = html.xpath('//meta[@property="og:video:duration"]/@content')
        duration = int(duration[0]) * 1000 if duration else None

        summary = html.xpath('//meta[@property="og:title"]/@content')
        summary = summary[0] if summary else None

        thumb = html.xpath('//meta[@property="og:image"]/@content')
        thumb = thumb[0] if thumb else FALLBACK
    else:
        title = html.xpath('//input[@name="fname"]/@value')
        if not title:
            raise Ex.MediaNotAvailable

        rt = RE_THUMB.search(page)
        thumb = rt.group(1) if rt else FALLBACK
        duration = None
        summary = None

    return VideoClipObject(
        title=title[0].strip(),
        thumb=Resource.ContentsOfURLWithFallback([thumb, FALLBACK]),
        duration=duration,
        summary=summary,
        source_title='VidSpot'
        )

####################################################################################################
@deferred
def MediaObjectsForURL(url):

    mo = list()
    eurl = get_embed_url(url)
    try:
        url_list = get_urls(HTTP.Request(eurl, cacheTime=10).content)
    except:
        Log.Exception(u"* Error: Cannot handle '{0}' >>>".format(eurl))
        raise Ex.MediaNotAvailable

    if url_list:
        return [
            MediaObject(
                audio_channels=2,
                video_resolution=str(f),
                optimized_for_streaming=False,
                parts=[
                    PartObject(key=u)
                    ],
                ) for (f, u) in reversed(sorted(url_list))
            ]

    raise Ex.MediaNotAvailable

####################################################################################################
def get_urls(page):
    url_list = list()
    u = Regex(r'[\"\']?file[\"\']?\s*?\:\s*?[\"\'](http[^\"\']+(?<!m3u8|smil))[\"\']\,\s*?(?:[^\,]+\,\s*?)?[\"\']?label[\"\']?\s*?\:\s*?[\"\'](\d+p?|original)[\"\']?').findall(page)

    if len(u) is not None:
        for url, d in u:
            if d == 'original':
                fmt = 360
            elif d.lower()[len(d)-1:] != 'p':
                fmt = int(d)
            else:
                fmt = (int(d[:-1]))

            url_list.append((fmt, url))

    return url_list

####################################################################################################
def get_embed_url(url):
    if '/embed-' not in url:
        if Regex(r'(https?\:\/\/(?:www\.)?\w+\.\w+\/[^\/]+\/[^\/]+)').search(url):
            html = HTML.ElementFromURL(url)
            builtin = html.xpath('//iframe/@src')
            if builtin:
                r = Regex(r'(?i)(https?\:\/\/(?:www\.)?\w+\.\w+\/)builtin\-([a-z0-9]+)').search(builtin[0])
                url = (r.group(1) + 'embed-' + r.group(2) + '.html') if r else url
        else:
            r = Regex(r'(?i)(https?\:\/\/(?:www\.)?\w+\.\w+\/)([a-z0-9]+)').search(url)
            url = (r.group(1) + 'embed-' + r.group(2) + '.html') if r else url

    return url
