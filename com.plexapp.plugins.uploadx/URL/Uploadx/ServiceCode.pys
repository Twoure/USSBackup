#!/usr/bin/env python

"""
Service Code for:
    Uploadx.org, Upload.af

Uploadx.org gives the following ssl error:
    URLError: <urlopen error [Errno 1] _ssl.c:504: error:14077438:SSL routines:SSL23_GET_SERVER_HELLO:tlsv1 alert internal error>

Upload.af requires a captcha, so cannot parse for Stream anymore :(
"""

USER_AGENT = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36'
RE_STITLE = Regex(r'https?://(?:www\.)?(\w+)\.\w+')

####################################################################################################
def MetadataObjectForURL(url):

    html = get_html(url)
    title = html.xpath('//input[@name="fname"]/@value')
    if not title:
        raise Ex.MediaExpired

    st = RE_STITLE.search(url)

    return VideoClipObject(
        title=title[0].strip(),
        thumb='http://i.imgur.com/75YO83o.jpg',
        source_title=st.group(1).title() if st else 'Uploadx'
        )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            audio_channels=2,
            optimized_for_streaming=False,
            parts=[
                PartObject(key=Callback(PlayVideo, url=url))
                ]
            )
        ]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

    html = get_post_html(url, get_html(url))
    if (len(html) is not None):
        if Regex(r'(?:\.|\/)(upload)\.').search(url):
            node = html.xpath('//a[starts-with(@class, "downloadbtn")]/@href')
        else:
            node = html.xpath('//span[@id="direct_link"]/a/@href')

        for vurl in node:
            vurl = vurl.replace(' ', '%20')
            Log.Debug(u"* PlayVideo URL = {0}".format(vurl))
            return IndirectResponse(VideoClipObject, key=vurl)

    raise Ex.MediaNotAvailable

####################################################################################################
def get_html(url):
    try:
        html = HTML.ElementFromURL(url, headers={'User-Agent': USER_AGENT}, cacheTime=10)
    except:
        Log.Exception(u"* Error: Cannot open '{0}' >>>".format(url))
        raise Ex.MediaNotAvailable
    return html

####################################################################################################
def get_post_html(url, html):
    http_headers = {'User-Agent': USER_AGENT, 'Referer': url}
    data = dict()
    for item in html.xpath('//input'):
        data[item.get('name')] = item.get('value')

    if bool(data):
        return get_post_html(url, HTML.ElementFromString(HTTP.Request(url, headers=http_headers, values=data).content))
    return html
